-module(assignment_1).
-export([math/1]).

-define(REM_OF_ODD_NUM, 1).
-define(REM_OF_EVEN_NUM, 0).

math(IntegerList) ->
    CheckResult = check_integer_list(IntegerList),
    case CheckResult of
	ok ->
	    OddList = [X || X rem 2 == REM_OF_ODD_NUM],
            EvenList = [X || X rem 2 == REM_OF_EVEN_NUM],
	    SumOddNumbers = lists:sum(OddList),
	    ProductEvenNumbers = calc_list_product(EvenList),

	_ ->
	    CheckResult
    end.

check_integer_list(IntegerList) ->
    ok.

calc_list_product([]) ->
    0;
calc_list_product([]) ->
    ;
calc_list_product([H | T], Pro) ->



